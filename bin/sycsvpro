#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'sycsvpro'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/sycsvpro` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/sycsvpro now"
  exit 64
end

include GLI::App

program_desc 'Processing CSV files'

version Sycsvpro::VERSION

desc 'CSV file to operate on'
arg_name 'FILE'
flag [:f,:file]

desc 'CSV file to write the result to'
arg_name 'OUT_FILE'
flag [:o, :out]

desc 'Analyze the CSV file regarding columns, rows and content'
command :analyze do |c|

  c.action do |global_options,options,args|
    analyzer = Sycsvpro::Analyzer.new(global_options[:f])
    result = analyzer.result
    puts "Analysis of #{global_options[:f]}"
    puts "#{result.col_count} columns: #{result.cols}"
    puts "#{result.row_count} rows"
    result.cols.each_with_index do |col, index|
      puts "#{index}: #{col}"
    end
    puts "Row sample data:"
    puts "#{result.sample_row}"
  end
end

desc 'Extract specified rows and columns from the file'
command :extract do |c|

  c.desc 'Rows to extract'
  c.arg_name '1,2,10-30|REGEXP'
  c.flag [:r, :row]

  c.desc 'Columns to extract'
  c.arg_name '1,2,10-30'
  c.flag [:c, :col]

  c.action do |global_options,options,args|
    puts "Extracting ..."
    extractor = Sycsvpro::Extractor.new(global_options[:f], global_options[:o],
                                        options[:r], options[:c])
    extractor.extract
    puts "extract done"    
  end
end

desc 'Collect values of specified rows and columns from the file and group them in categories'
command :collect do |c|

  c.desc 'Rows to consider for collection'
  c.arg_name 'ROW1,ROW2,ROW10-ROW30|REGEXP'
  c.flag [:r, :row]

  c.desc 'Columns to collect values from'
  c.arg_name 'CATEGORY1:ROW1,ROW2,ROW10-ROW30+CATEGORY2:ROW3-ROW9'
  c.flag [:c, :col]

  c.action do |global_options,options,args|
    puts "Collecting ..."
    collector = Sycsvpro::Collector.new(infile: global_options[:f], outfile: global_options[:o],
                                        rows: options[:r], cols: options[:c])
    collector.execute
    puts "collect done"    
  end
end

desc 'Executes the code provided in a file'
arg_name 'PRO_FILE, METHOD'
command :execute do |c|
  c.action do |global_options,options,args|
    puts args.inspect
    profile = Sycsvpro::Profile.new(args[0])
    profile.execute(args[1])
    puts "execute done"
  end
end

desc 'Counts the occurences of column values. Uses column values as headings with count as values'
command :count do |c|

  c.desc 'Key column that is assigned the count of column values to'
  c.arg_name 'KEY_COLUMN'
  c.flag [:k, :key]

  c.desc 'Rows to consider'
  c.arg_name '1,2,10-30|REGEXP'
  c.flag [:r, :row]

  c.desc 'Columns to count'
  c.arg_name '1,2,10-30'
  c.flag [:c, :col]

  c.desc 'Format of date values'
  c.arg_name '%d.%m.%Y|%m/%d/%Y|...'
  c.flag [:df]

  c.action do |global_options,options,args|
    counter = Sycsvpro::Counter.new(infile: global_options[:f], outfile: global_options[:o], 
                                    key: options[:k], rows: options[:r], cols: options[:c],
                                    df: options[:df])
    counter.execute
    puts "count done"
  end
end

desc 'Map values in columns to new values'
arg_name 'MAPPINGS-FILE'
command :map do |c|
  c.desc 'Rows to consider'
  c.arg_name 'ROW1,ROW2,ROW10-ROW30|REGEXP'
  c.flag [:r, :row]

  c.desc 'Columns to consider for mapping'
  c.arg_name 'COL1,COL2,COL10-COL30'
  c.flag [:c, :col]

  c.action do |global_options,options,args|
    mapper = Sycsvpro::Mapper.new(infile: global_options[:f], outfile: global_options[:o],
                                  mapping: args[0], rows: options[:r], cols: options[:c])
    mapper.execute
    puts "mapping done"
  end
end

desc 'Process math operations on columns'
command :calc do |c|
    
    c.desc 'The first non-empty column is considered the header. '+
           'If additional columns are created then *,COL1,COL2 will create the additional header '+
           'columns COL1 and COL2'
    c.arg_name '*,COL2,COL2'
    c.flag [:h, :header]

    c.desc 'Columns to consider for calculations'
    c.arg_name 'ROW1,ROW2-ROW10|REGEXP'
    c.flag [:r, :row]

    c.desc 'Column to do calculations on'
    c.arg_name 'COL1:*2,COL2:-C3,COL3:*2+(4+C5),COL6:NEW_COL=C1+5'
    c.flag [:c, :col]

  c.action do |global_options,options,args|
    calculator = Sycsvpro::Calculator.new(infile: global_options[:f], outfile: global_options[:o],
                                          header: options[:h], rows: options[:r], cols: options[:c])
    calculator.execute 
    puts "calc done"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
