#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'sycsvpro'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/sycsvpro` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/sycsvpro now"
  exit 64
end

include GLI::App

program_desc 'Processing CSV files'

version Sycsvpro::VERSION

=begin
desc 'CSV file to operate on'
switch [:f,:file]
=end

desc 'CSV file to operate on'
arg_name 'FILE'
flag [:f,:file]

desc 'CSV file to write the result to'
arg_name 'OUT_FILE'
flag [:o, :out]

desc 'Analyze the CSV file regarding columns, rows and content'
command :analyze do |c|

  c.action do |global_options,options,args|
    analyzer = Sycsvpro::Analyzer.new(global_options[:f])
    result = analyzer.result
    puts "Analysis of #{global_options[:f]}"
    puts "#{result.col_count} columns: #{result.cols}"
    puts "#{result.row_count} rows"
    puts "Row sample data:"
    puts "#{result.sample_row}"
  end
end

desc 'Extract specified rows and columns from the file'
arg_name 'ROWS|COLOMNS|CONDITION'
command :extract do |c|

  c.desc 'Rows to extract'
  c.arg_name 'ROW1,ROW2,ROW10-ROW30,>ROW50,<ROW99|REGEXP'
  c.flag [:r, :row]

  c.desc 'Columns to extract'
  c.arg_name 'COL1,COL2,COL10-COL30,>COL50,<COL99|REGEXP'
  c.flag [:c, :col]

  c.action do |global_options,options,args|
    puts "Extracting ..."
    extractor = Sycsvpro::Extractor.new(global_options[:f], global_options[:o],
                                        options[:r], options[:c])
    extractor.extract
        
  end
end

desc 'Profile executes the code profided in a file'
arg_name 'PRO_FILE'
command :profile do |c|
  c.action do |global_options,options,args|
    puts args.inspect
    profile = Sycsvpro::Profile.new(args[0])
    profile.execute
  end
end

desc 'Describe count here'
arg_name 'Describe arguments to count here'
command :count do |c|
  c.action do |global_options,options,args|
    puts "count command ran"
  end
end

desc 'Describe map here'
arg_name 'Describe arguments to map here'
command :map do |c|
  c.action do |global_options,options,args|
    puts "map command ran"
  end
end

desc 'Describe calc here'
arg_name 'Describe arguments to calc here'
command :calc do |c|
  c.action do |global_options,options,args|
    puts "calc command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
